import re
import logging
import asyncio
import signal
from typing import Optional

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, 
    ApplicationBuilder,
    CommandHandler, 
    MessageHandler, 
    ConversationHandler, 
    ContextTypes, 
    filters,
)

from app.config import Config
from app.formatter import OutputFormatter
from app.messages import MESSAGES
from app.router_client import RouterLocalClient
from app.logger import get_logger

# Enum-like states for clearer state management
class ConversationStates:
    ADD_SITE = 0
    DELETE_SITE = 1
    REBOOT_ROUTER = 2

class VPNBot:
    def __init__(self, config: Config, router_client: RouterLocalClient):
        self.config = config
        self.router_client = router_client
        self.output_formatter = OutputFormatter()
        self.logger = get_logger(__name__)
        
        self.application: Optional[Application] = None
        
        # –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.user_request_counters = {}
        self.MAX_REQUESTS_PER_MINUTE = 10
        self.request_cooldown = 60  # —Å–µ–∫—É–Ω–¥

    async def initialize(self):
        """Initialize the bot application."""
        try:
            # Create application
            self.application = (
                Application.builder()
                .token(self.config.BOT_TOKEN)
                .build()
            )
            
            # Register handlers
            self._register_handlers()
            
            return self
        except Exception as e:
            self.logger.critical(f"Bot initialization failed: {e}", exc_info=True)
            raise

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é."""
        if not self.application:
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ ConversationHandler
        conversation_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex(r"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç"), self.ask_add_site),
                MessageHandler(filters.Regex(r"‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç"), self.ask_delete_site),
                MessageHandler(filters.Regex(r"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä"), self.ask_reboot_router),
            ],
            states={
                ConversationStates.ADD_SITE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_site)
                ],
                ConversationStates.DELETE_SITE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.delete_site)
                ],
                ConversationStates.REBOOT_ROUTER: [
                    MessageHandler(filters.Regex(r"^(–î–∞|–ù–µ—Ç)$"), self.reboot_router)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_operation)],
            allow_reentry=True
        )

        # –ì–ª–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers = [
            CommandHandler("start", self.cmd_start),
            MessageHandler(filters.Regex(r"üìú –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤"), self.list_sites),
        ]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for handler in handlers:
            self.application.add_handler(handler)
        self.application.add_handler(conversation_handler)

    async def start(self):
        """Start bot with comprehensive error handling."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
            if not self.application:
                await self.initialize()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ updater, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if self.application.updater.running:
                try:
                    await self.application.updater.stop()
                except Exception as stop_error:
                    self.logger.warning(f"Error stopping existing updater: {stop_error}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
            await self.application.bot.delete_webhook(drop_pending_updates=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.application.updater.start_polling(
                poll_interval=1.0,   
                timeout=20,           
                drop_pending_updates=True  
            )

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            while True:
                await asyncio.sleep(3600)  # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

        except asyncio.CancelledError:
            self.logger.info("Bot polling was cancelled")
        except Exception as e:
            self.logger.critical(f"Bot startup failed: {str(e)}", exc_info=True)
        finally:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            try:
                if self.application and self.application.updater.running:
                    await self.application.updater.stop()
                if self.application and self.application.running:
                    await self.application.stop()
                    await self.application.shutdown()
            except Exception as shutdown_error:
                self.logger.error(f"Error during shutdown: {shutdown_error}")

    async def _post_init(self, application: Application):
        """Post-initialization setup."""
        self.logger.info("Bot initialization complete.")
        self._register_handlers()

    async def _post_shutdown(self, application: Application):
        """Cleanup after bot shutdown."""
        self.logger.info("Bot shutdown complete.")

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler."""
        if not await self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text(MESSAGES['access_denied'])
            return
        
        # Debugging print
        self.logger.info(f"Start command received from user {update.effective_user.id}")
        
        await update.message.reply_text(
            MESSAGES['start'], 
            reply_markup=self._get_menu_keyboard(), 
            parse_mode="HTML"
        )

    async def list_sites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤."""
        if not await self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text(MESSAGES['access_denied'])
            return
        try:
            sites_raw = await self.router_client.execute_command("kvas list")
            sites_formatted = self.output_formatter.clean_terminal_output(sites_raw)
            await update.message.reply_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:\n\n{sites_formatted or MESSAGES['site_list_empty']}",
                parse_mode="HTML",
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤.")

    async def ask_add_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
        if not await self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text(MESSAGES['access_denied'])
            return ConversationHandler.END

        await update.message.reply_text(
            MESSAGES['site_add_prompt'], 
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        )
        return ConversationStates.ADD_SITE

    async def add_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if update.message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                                            reply_markup=self._get_menu_keyboard())
            return ConversationHandler.END

        site = update.message.text.strip().lower()
        
        if not self._validate_domain(site):
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: google.com", 
                reply_markup=self._get_menu_keyboard()
            )
            return ConversationHandler.END

        try:
            output = await self.router_client.execute_command(f"kvas add {site} -y")
            if "–¥–æ–±–∞–≤–ª–µ–Ω" in output.lower():
                await update.message.reply_text(
                    f"‚úÖ –°–∞–π—Ç {site} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", 
                    reply_markup=self._get_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç. –û—Ç–≤–µ—Ç: {output}", 
                    reply_markup=self._get_menu_keyboard()
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
                reply_markup=self._get_menu_keyboard()
            )
        
        return ConversationHandler.END

    async def ask_delete_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞."""
        if not await self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text(MESSAGES['access_denied'])
            return ConversationHandler.END

        await update.message.reply_text(
            MESSAGES['site_delete_prompt'], 
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        )
        return ConversationStates.DELETE_SITE

    async def delete_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if update.message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                                            reply_markup=self._get_menu_keyboard())
            return ConversationHandler.END

        site = update.message.text.strip().lower()
        
        if not self._validate_domain(site):
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: google.com", 
                reply_markup=self._get_menu_keyboard()
            )
            return ConversationHandler.END

        try:
            output = await self.router_client.execute_command(f"kvas del {site} -y")
            if "—É–¥–∞–ª–µ–Ω" in output.lower():
                await update.message.reply_text(
                    f"‚úÖ –°–∞–π—Ç {site} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", 
                    reply_markup=self._get_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç. –û—Ç–≤–µ—Ç: {output}", 
                    reply_markup=self._get_menu_keyboard()
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
                reply_markup=self._get_menu_keyboard()
            )
        
        return ConversationHandler.END

    async def ask_reboot_router(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Ä–æ—É—Ç–µ—Ä–∞."""
        if not await self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text(MESSAGES['access_denied'])
            return ConversationHandler.END
        await update.message.reply_text(
            "ü§î –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä?",
            reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True),
        )
        return ConversationStates.REBOOT_ROUTER

    async def reboot_router(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞."""
        if update.message.text.strip().lower() == "–¥–∞":
            try:
                await update.message.reply_text(text="‚úÖ –†–æ—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.", reply_markup=self._get_menu_keyboard())
                await self.router_client.execute_command("reboot")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞: {e}", exc_info=True)
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        else:
            await update.message.reply_text(text="‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=self._get_menu_keyboard())
        return ConversationHandler.END

    async def _manage_site(self, update: Update, action: str, success_message: str):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º/—É–¥–∞–ª–µ–Ω–∏–µ–º —Å–∞–π—Ç–æ–≤."""
        site = update.message.text.strip().lower()
        try:
            output = await self.router_client.execute_command(f"kvas {action} {site} -y")
            if success_message.upper() in output.upper():
                await update.message.reply_text(f"‚úÖ –°–∞–π—Ç {site} —É—Å–ø–µ—à–Ω–æ {success_message}.")
            else:
                await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {output}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º ({action}): {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _rate_limit_user(self, user_id: int) -> bool:
        """Implement rate limiting for user requests."""
        current_time = asyncio.get_event_loop().time()
        user_counter = self.user_request_counters.get(user_id, {'count': 0, 'time': current_time})
        
        # Reset counter if time elapsed
        if current_time - user_counter['time'] > self.request_cooldown:
            user_counter = {'count': 0, 'time': current_time}
        
        user_counter['count'] += 1
        self.user_request_counters[user_id] = user_counter
        
        return user_counter['count'] <= self.MAX_REQUESTS_PER_MINUTE

    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel the current operation."""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # ... (rest of the methods remain the same as in the previous implementation)

    def _validate_domain(self, domain: str) -> bool:
        """Enhanced domain validation."""
        if not domain or len(domain) > 255:
            return False
        
        # More comprehensive domain validation
        domain_regex = r'^(?!-)[A-Za-z0-9-]{1,63}(?<!-)(\.[A-Za-z0-9-]{1,63})*\.[A-Za-z]{2,}$'
        return bool(re.match(domain_regex, domain, re.IGNORECASE))

    async def _is_user_allowed(self, user_id: int) -> bool:
        """Enhanced user access control."""
        # Debugging print
        self.logger.info(f"Checking access for user {user_id}")
        
        # Check if user is in allowed list
        is_allowed = user_id in self.config.ALLOWED_USERS
        
        if not is_allowed:
            self.logger.warning(f"Access denied for user {user_id}")
        
        return is_allowed

    def _get_menu_keyboard(self) -> ReplyKeyboardMarkup:
        """Create menu keyboard."""
        keyboard = [
            ["üìú –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç"],
            ["üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä"],
        ]
        return ReplyKeyboardMarkup(
            keyboard=keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False
        )