import asyncio
import html
import logging
import re
from aiogram import F, Bot, Dispatcher, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.config import Config
from app.formatter import OutputFormatter
from app.states import AddSiteState, DeleteSiteState, RebootRouterState
from app.messages import MESSAGES
from app.router_client import RouterLocalClient
from app.logger import get_logger

class VPNBot:
    def __init__(self, config: Config, router_client: RouterLocalClient):
        self.config = config
        self.router_client = router_client
        self.bot = Bot(token=config.BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.router = Router()
        self.output_formatter = OutputFormatter()
        self.logger = get_logger(__name__)
        self._setup_handlers()

    def _setup_handlers(self):
        self.router.message.register(self.cmd_start, Command("start"))
        self.router.message.register(self.test_connection, Command("test"))
        self.router.message.register(
            self.list_sites, F.text == "üìú –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤"
        )
        self.router.message.register(
            self.ask_add_site, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç"
        )
        self.router.message.register(
            self.add_site, AddSiteState.waiting_for_site_name
        )
        self.router.message.register(
            self.ask_delete_site, F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç"
        )
        self.router.message.register(
            self.delete_site, DeleteSiteState.waiting_for_site_name
        )
        self.router.message.register(
            self.ask_reboot_router, F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä"
        )
        self.router.message.register(
            self.reboot_router, RebootRouterState.waiting_for_confirmation
        )

    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        if not await self._is_user_allowed(message.from_user.id):
            await message.answer(MESSAGES['access_denied'])
            return
        await message.answer(
            MESSAGES['start'], 
            reply_markup=self._get_menu_keyboard(), 
            parse_mode="HTML"
        )

    async def test_connection(self, message: Message):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥."""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            await self.router_client.execute_command("pwd")
            await message.answer("üü¢ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –∫–æ–º–∞–Ω–¥—ã —Ä–æ—É—Ç–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            await message.answer("üî¥ –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.")

    async def _is_user_allowed(self, user_id: int) -> bool:
        return user_id in self.config.ALLOWED_USERS

    def _get_menu_keyboard(self) -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤")],
            [
                KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç"), 
                KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç")
            ],
            [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    async def list_sites(self, message: Message):
        if not await self._is_user_allowed(message.from_user.id):
            await message.answer(MESSAGES['access_denied'])
            return
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è execute_command
            sites_raw = await self.router_client.execute_command("kvas list")
            sites_formatted = self.output_formatter.clean_terminal_output(sites_raw)
            
            if not sites_formatted:
                self.logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤")
                await message.answer(MESSAGES['site_list_empty'])
                return
            
            await message.answer(
                text=f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:\n\n{sites_formatted}", 
                parse_mode="HTML"
            )
        except Exception as e:
            self.logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}", exc_info=True)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    async def ask_add_site(self, message: Message, state: FSMContext):
        if not await self._is_user_allowed(message.from_user.id):
            await message.answer(MESSAGES['access_denied'])
            return
        await message.answer(MESSAGES['site_add_prompt'])
        await state.set_state(AddSiteState.waiting_for_site_name)

    async def add_site(self, message: Message, state: FSMContext):
        site = message.text.strip().lower()
        if not self._validate_domain(site):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com)", 
                parse_mode="HTML"
            )
            await state.clear()
            return

        status_message = await message.answer(
            text=f"‚åõÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞: {site}...\n\n" 
                 f"<i>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –¥–æ 40 —Å–µ–∫—É–Ω–¥, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è.</i>", 
            parse_mode="HTML"
        )

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è execute_command
            raw_output = await self.router_client.execute_command(
                f"kvas add {site} -y", timeout=60
            )
            
            if "–î–û–ë–ê–í–õ–ï–ù" in raw_output:
                await status_message.edit_text(
                    f"‚úÖ –°–∞–π—Ç <i>{site}</i> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.", 
                    parse_mode="HTML"
                )
            else:
                error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n<pre>{raw_output[:200]}</pre>"
                await status_message.edit_text(error_msg, parse_mode="HTML")
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {site}: {raw_output}")
        
        except asyncio.TimeoutError:
            await status_message.edit_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞ {site}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                parse_mode="HTML"
            )
        
        except Exception as e:
            await status_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞:\n<pre>{str(e)[:200]}</pre>", 
                parse_mode="HTML"
            )
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞ {site}: {str(e)}", exc_info=True)
        
        finally:
            await state.clear()

    async def ask_delete_site(self, message: Message, state: FSMContext):
        if not await self._is_user_allowed(message.from_user.id):
            await message.answer(MESSAGES['access_denied'])
            return
        await state.clear()
        await message.answer(MESSAGES['site_delete_prompt'])
        await state.set_state(DeleteSiteState.waiting_for_site_name)

    async def delete_site(self, message: Message, state: FSMContext):
        site = message.text.strip().lower()
        current_state = await state.get_state()
        
        if current_state != DeleteSiteState.waiting_for_site_name.state:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        if not self._validate_domain(site):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: example.com", 
                parse_mode="HTML"
            )
            return

        status_message = await message.answer(
            text=f"‚åõ –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞: {site}...\n\n" 
                 f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</i>", 
            parse_mode="HTML"
        )

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è execute_command
            raw_output = await self.router_client.execute_command(
                f"kvas del {site} -y", timeout=30
            )
            
            if "–£–î–ê–õ–ï–ù" in raw_output:
                await status_message.edit_text(
                    f"‚úÖ –°–∞–π—Ç <i>{site}</i> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", 
                    parse_mode="HTML"
                )
            elif "–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!" in raw_output:
                await status_message.edit_text(
                    f"‚ÑπÔ∏è –°–∞–π—Ç <i>{site}</i> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.", 
                    parse_mode="HTML"
                )
            else:
                await status_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n<pre>{raw_output[:200]}</pre>", 
                    parse_mode="HTML"
                )
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ {site}: {e}", exc_info=True)
            await status_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: <pre>{html.escape(str(e))}</pre>", 
                parse_mode="HTML"
            )
        
        finally:
            await state.clear()

    async def ask_reboot_router(self, message: Message, state: FSMContext):
        if not await self._is_user_allowed(message.from_user.id):
            await message.answer(MESSAGES['access_denied'])
            return
        await state.clear()
        await message.answer(
            f"ü§î –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä?", 
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[ 
                    [ 
                        KeyboardButton(text="–î–∞"), 
                        KeyboardButton(text="–ù–µ—Ç") 
                    ], 
                ], 
                resize_keyboard=True
            )
        )
        await state.set_state(RebootRouterState.waiting_for_confirmation)

    async def reboot_router(self, message: Message, state: FSMContext):
        answer = message.text.strip().lower()
        current_state = await state.get_state()
        
        if current_state != RebootRouterState.waiting_for_confirmation.state:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        if answer == "–¥–∞":
            reboot = True
        elif answer == "–Ω–µ—Ç":
            reboot = False
        else:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            return

        if reboot:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è execute_command
                await self.router_client.execute_command("system reboot", timeout=10)
                await message.answer(
                    "‚úÖ –†–æ—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.", 
                    reply_markup=self._get_menu_keyboard()
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞: {e}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ—É—Ç–µ—Ä–∞.")
        else:
            await message.answer(
                "‚ùå –†–æ—É—Ç–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.", 
                reply_markup=self._get_menu_keyboard()
            )
        
        await state.clear()

    def _validate_domain(self, domain: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
        domain_pattern = re.compile(
            r'^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$'
        )
        return bool(domain_pattern.match(domain))

    async def start(self):
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ aiogram
            aiogram_logger = get_logger('aiogram.dispatcher')
            aiogram_logger.setLevel(logging.CRITICAL)
            
            await self.bot.delete_webhook(drop_pending_updates=True)
            self.dp.include_router(self.router)
            await self.dp.start_polling(self.bot, polling_timeout=30)
        
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        
        finally:
            await self.bot.session.close()